       |/*
       |
       |Boost Software License - Version 1.0 - August 17th, 2003
       |
       |Permission is hereby granted, free of charge, to any person or organization
       |obtaining a copy of the software and accompanying documentation covered by
       |this license (the "Software") to use, reproduce, display, distribute,
       |execute, and transmit the Software, and to prepare derivative works of the
       |Software, and to permit third-parties to whom the Software is furnished to
       |do so, all subject to the following:
       |
       |The copyright notices in the Software and this entire statement, including
       |the above license grant, this restriction and the following disclaimer,
       |must be included in all copies of the Software, in whole or in part, and
       |all derivative works of the Software, unless such copies or derivative
       |works are solely in the form of machine-executable object code generated by
       |a source language processor.
       |
       |THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
       |SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
       |FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
       |ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
       |DEALINGS IN THE SOFTWARE.
       |
       |*/
       |module derelict.opengl3.gl3;
       |
       |public {
       |    import derelict.opengl3.types;
       |    import derelict.opengl3.constants;
       |    import derelict.opengl3.functions;
       |    import derelict.opengl3.arb;
       |    import derelict.opengl3.ext;
       |}
       |
       |private {
       |    import std.algorithm;
       |    import std.conv;
       |
       |    import derelict.util.loader;
       |    import derelict.util.exception;
       |    import derelict.util.system;
       |    import derelict.opengl3.internal;
       |
       |    static if(Derelict_OS_Android || Derelict_OS_iOS) {
       |        // Android and iOS do not support OpenGL3; use DerelictOpenGLES.
       |        static assert(false, "OpenGL is not supported on Android or iOS; use OpenGLES (DerelictGLES) instead");
       |    } else static if(Derelict_OS_Windows) {
       |        import derelict.opengl3.wgl;
       |        import derelict.opengl3.wglext;
       |        enum libNames = "opengl32.dll";
       |    } else static if(Derelict_OS_Mac) {
       |        import derelict.opengl3.cgl;
       |        enum libNames = "../Frameworks/OpenGL.framework/OpenGL, /Library/Frameworks/OpenGL.framework/OpenGL, /System/Library/Frameworks/OpenGL.framework/OpenGL";
       |        void loadPlatformEXT(GLVersion) {}
       |    } else static if(Derelict_OS_Posix) {
       |        import derelict.opengl3.glx;
       |        import derelict.opengl3.glxext;
       |        enum libNames = "libGL.so.1,libGL.so";
       |    } else
       |        static assert(0, "Need to implement OpenGL libNames for this operating system.");
       |}
       |
       |class DerelictGL3Loader : SharedLibLoader
       |{
       |    private GLVersion _loadedVersion;
       |
       |    public
       |    {
      2|        this() {
      2|            super(libNames);
       |        }
       |
       |        GLVersion loadedVersion() @property {
0000000|            return _loadedVersion;
       |        }
       |
       |        GLVersion reload(GLVersion minVersion = GLVersion.None, GLVersion maxVersion = GLVersion.HighestSupported) {
       |            import std.string : format;
       |
       |            // Make sure a context is active, otherwise this could be meaningless.
0000000|            if(!hasValidContext())
0000000|                throw new DerelictException("DerelictGL3.reload failure: An OpenGL context is not currently active.");
       |
0000000|            GLVersion glVer = GLVersion.GL11;
0000000|            scope(exit) _loadedVersion = glVer;
       |
0000000|            GLVersion maxVer = findMaxAvailable();
0000000|            if(minVersion != GLVersion.None && maxVer < minVersion) {
0000000|                throw new DerelictException(format("OpenGL version %s was required, but context only supports %s",
       |                    minVersion, maxVer));
       |            }
0000000|            if(maxVer > maxVersion)
0000000|                maxVer = maxVersion;
       |
0000000|            initExtensionCache(glVer, missingSymbolCallback);
       |
0000000|            if(maxVer >= GLVersion.GL12) {
0000000|                bindGLFunc(cast(void**)&glDrawRangeElements, "glDrawRangeElements");
0000000|                bindGLFunc(cast(void**)&glTexImage3D, "glTexImage3D");
0000000|                bindGLFunc(cast(void**)&glTexSubImage3D, "glTexSubImage3D");
0000000|                bindGLFunc(cast(void**)&glCopyTexSubImage3D, "glCopyTexSubImage3D");
0000000|                glVer = GLVersion.GL12;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL13) {
0000000|                bindGLFunc(cast(void**)&glActiveTexture, "glActiveTexture");
0000000|                bindGLFunc(cast(void**)&glSampleCoverage, "glSampleCoverage");
0000000|                bindGLFunc(cast(void**)&glCompressedTexImage3D, "glCompressedTexImage3D");
0000000|                bindGLFunc(cast(void**)&glCompressedTexImage2D, "glCompressedTexImage2D");
0000000|                bindGLFunc(cast(void**)&glCompressedTexImage1D, "glCompressedTexImage1D");
0000000|                bindGLFunc(cast(void**)&glCompressedTexSubImage3D, "glCompressedTexSubImage3D");
0000000|                bindGLFunc(cast(void**)&glCompressedTexSubImage2D, "glCompressedTexSubImage2D");
0000000|                bindGLFunc(cast(void**)&glCompressedTexSubImage1D, "glCompressedTexSubImage1D");
0000000|                bindGLFunc(cast(void**)&glGetCompressedTexImage, "glGetCompressedTexImage");
0000000|                glVer = GLVersion.GL13;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL14) {
0000000|                bindGLFunc(cast(void**)&glBlendFuncSeparate, "glBlendFuncSeparate");
0000000|                bindGLFunc(cast(void**)&glMultiDrawArrays, "glMultiDrawArrays");
0000000|                bindGLFunc(cast(void**)&glMultiDrawElements, "glMultiDrawElements");
0000000|                bindGLFunc(cast(void**)&glPointParameterf, "glPointParameterf");
0000000|                bindGLFunc(cast(void**)&glPointParameterfv, "glPointParameterfv");
0000000|                bindGLFunc(cast(void**)&glPointParameteri, "glPointParameteri");
0000000|                bindGLFunc(cast(void**)&glPointParameteriv, "glPointParameteriv");
0000000|                bindGLFunc(cast(void**)&glBlendColor, "glBlendColor");
0000000|                bindGLFunc(cast(void**)&glBlendEquation, "glBlendEquation");
0000000|                glVer = GLVersion.GL14;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL15) {
0000000|                bindGLFunc(cast(void**)&glGenQueries, "glGenQueries");
0000000|                bindGLFunc(cast(void**)&glDeleteQueries, "glDeleteQueries");
0000000|                bindGLFunc(cast(void**)&glIsQuery, "glIsQuery");
0000000|                bindGLFunc(cast(void**)&glBeginQuery, "glBeginQuery");
0000000|                bindGLFunc(cast(void**)&glEndQuery, "glEndQuery");
0000000|                bindGLFunc(cast(void**)&glGetQueryiv, "glGetQueryiv");
0000000|                bindGLFunc(cast(void**)&glGetQueryObjectiv, "glGetQueryObjectiv");
0000000|                bindGLFunc(cast(void**)&glGetQueryObjectuiv, "glGetQueryObjectuiv");
0000000|                bindGLFunc(cast(void**)&glBindBuffer, "glBindBuffer");
0000000|                bindGLFunc(cast(void**)&glDeleteBuffers, "glDeleteBuffers");
0000000|                bindGLFunc(cast(void**)&glGenBuffers, "glGenBuffers");
0000000|                bindGLFunc(cast(void**)&glIsBuffer, "glIsBuffer");
0000000|                bindGLFunc(cast(void**)&glBufferData, "glBufferData");
0000000|                bindGLFunc(cast(void**)&glBufferSubData, "glBufferSubData");
0000000|                bindGLFunc(cast(void**)&glGetBufferSubData, "glGetBufferSubData");
0000000|                bindGLFunc(cast(void**)&glMapBuffer, "glMapBuffer");
0000000|                bindGLFunc(cast(void**)&glUnmapBuffer, "glUnmapBuffer");
0000000|                bindGLFunc(cast(void**)&glGetBufferParameteriv, "glGetBufferParameteriv");
0000000|                bindGLFunc(cast(void**)&glGetBufferPointerv, "glGetBufferPointerv");
0000000|                glVer = GLVersion.GL15;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL20) {
0000000|                bindGLFunc(cast(void**)&glBlendEquationSeparate, "glBlendEquationSeparate");
0000000|                bindGLFunc(cast(void**)&glDrawBuffers, "glDrawBuffers");
0000000|                bindGLFunc(cast(void**)&glStencilOpSeparate, "glStencilOpSeparate");
0000000|                bindGLFunc(cast(void**)&glStencilFuncSeparate, "glStencilFuncSeparate");
0000000|                bindGLFunc(cast(void**)&glStencilMaskSeparate, "glStencilMaskSeparate");
0000000|                bindGLFunc(cast(void**)&glAttachShader, "glAttachShader");
0000000|                bindGLFunc(cast(void**)&glBindAttribLocation, "glBindAttribLocation");
0000000|                bindGLFunc(cast(void**)&glCompileShader, "glCompileShader");
0000000|                bindGLFunc(cast(void**)&glCreateProgram, "glCreateProgram");
0000000|                bindGLFunc(cast(void**)&glCreateShader, "glCreateShader");
0000000|                bindGLFunc(cast(void**)&glDeleteProgram, "glDeleteProgram");
0000000|                bindGLFunc(cast(void**)&glDeleteShader, "glDeleteShader");
0000000|                bindGLFunc(cast(void**)&glDetachShader, "glDetachShader");
0000000|                bindGLFunc(cast(void**)&glDisableVertexAttribArray, "glDisableVertexAttribArray");
0000000|                bindGLFunc(cast(void**)&glEnableVertexAttribArray, "glEnableVertexAttribArray");
0000000|                bindGLFunc(cast(void**)&glGetActiveAttrib, "glGetActiveAttrib");
0000000|                bindGLFunc(cast(void**)&glGetActiveUniform, "glGetActiveUniform");
0000000|                bindGLFunc(cast(void**)&glGetAttachedShaders, "glGetAttachedShaders");
0000000|                bindGLFunc(cast(void**)&glGetAttribLocation, "glGetAttribLocation");
0000000|                bindGLFunc(cast(void**)&glGetProgramiv, "glGetProgramiv");
0000000|                bindGLFunc(cast(void**)&glGetProgramInfoLog, "glGetProgramInfoLog");
0000000|                bindGLFunc(cast(void**)&glGetShaderiv, "glGetShaderiv");
0000000|                bindGLFunc(cast(void**)&glGetShaderInfoLog, "glGetShaderInfoLog");
0000000|                bindGLFunc(cast(void**)&glGetShaderSource, "glGetShaderSource");
0000000|                bindGLFunc(cast(void**)&glGetUniformLocation, "glGetUniformLocation");
0000000|                bindGLFunc(cast(void**)&glGetUniformfv, "glGetUniformfv");
0000000|                bindGLFunc(cast(void**)&glGetUniformiv, "glGetUniformiv");
0000000|                bindGLFunc(cast(void**)&glGetVertexAttribdv, "glGetVertexAttribdv");
0000000|                bindGLFunc(cast(void**)&glGetVertexAttribfv, "glGetVertexAttribfv");
0000000|                bindGLFunc(cast(void**)&glGetVertexAttribiv, "glGetVertexAttribiv");
0000000|                bindGLFunc(cast(void**)&glGetVertexAttribPointerv, "glGetVertexAttribPointerv");
0000000|                bindGLFunc(cast(void**)&glIsProgram, "glIsProgram");
0000000|                bindGLFunc(cast(void**)&glIsShader, "glIsShader");
0000000|                bindGLFunc(cast(void**)&glLinkProgram, "glLinkProgram");
0000000|                bindGLFunc(cast(void**)&glShaderSource, "glShaderSource");
0000000|                bindGLFunc(cast(void**)&glUseProgram, "glUseProgram");
0000000|                bindGLFunc(cast(void**)&glUniform1f, "glUniform1f");
0000000|                bindGLFunc(cast(void**)&glUniform2f, "glUniform2f");
0000000|                bindGLFunc(cast(void**)&glUniform3f, "glUniform3f");
0000000|                bindGLFunc(cast(void**)&glUniform4f, "glUniform4f");
0000000|                bindGLFunc(cast(void**)&glUniform1i, "glUniform1i");
0000000|                bindGLFunc(cast(void**)&glUniform2i, "glUniform2i");
0000000|                bindGLFunc(cast(void**)&glUniform4i, "glUniform4i");
0000000|                bindGLFunc(cast(void**)&glUniform1fv, "glUniform1fv");
0000000|                bindGLFunc(cast(void**)&glUniform2fv, "glUniform2fv");
0000000|                bindGLFunc(cast(void**)&glUniform3fv, "glUniform3fv");
0000000|                bindGLFunc(cast(void**)&glUniform4fv, "glUniform4fv");
0000000|                bindGLFunc(cast(void**)&glUniform1iv, "glUniform1iv");
0000000|                bindGLFunc(cast(void**)&glUniform2iv, "glUniform2iv");
0000000|                bindGLFunc(cast(void**)&glUniform3iv, "glUniform3iv");
0000000|                bindGLFunc(cast(void**)&glUniform4iv, "glUniform4iv");
0000000|                bindGLFunc(cast(void**)&glUniformMatrix2fv, "glUniformMatrix2fv");
0000000|                bindGLFunc(cast(void**)&glUniformMatrix3fv, "glUniformMatrix3fv");
0000000|                bindGLFunc(cast(void**)&glUniformMatrix4fv, "glUniformMatrix4fv");
0000000|                bindGLFunc(cast(void**)&glValidateProgram, "glValidateProgram");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib1d, "glVertexAttrib1d");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib1dv, "glVertexAttrib1dv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib1f, "glVertexAttrib1f");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib1fv, "glVertexAttrib1fv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib1s, "glVertexAttrib1s");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib1sv, "glVertexAttrib1sv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib2d, "glVertexAttrib2d");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib2dv, "glVertexAttrib2dv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib2f, "glVertexAttrib2f");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib2fv, "glVertexAttrib2fv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib2s, "glVertexAttrib2s");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib2sv, "glVertexAttrib2sv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib3d, "glVertexAttrib3d");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib3dv, "glVertexAttrib3dv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib3f, "glVertexAttrib3f");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib3fv, "glVertexAttrib3fv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib3s, "glVertexAttrib3s");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib3sv, "glVertexAttrib3sv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4Nbv, "glVertexAttrib4Nbv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4Niv, "glVertexAttrib4Niv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4Nsv, "glVertexAttrib4Nsv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4Nub, "glVertexAttrib4Nub");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4Nubv, "glVertexAttrib4Nubv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4Nuiv, "glVertexAttrib4Nuiv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4Nusv, "glVertexAttrib4Nusv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4bv, "glVertexAttrib4bv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4d, "glVertexAttrib4d");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4dv, "glVertexAttrib4dv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4f, "glVertexAttrib4f");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4fv, "glVertexAttrib4fv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4iv, "glVertexAttrib4iv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4s, "glVertexAttrib4s");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4sv, "glVertexAttrib4sv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4ubv, "glVertexAttrib4ubv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4uiv, "glVertexAttrib4uiv");
0000000|                bindGLFunc(cast(void**)&glVertexAttrib4usv, "glVertexAttrib4usv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribPointer, "glVertexAttribPointer");
0000000|                glVer = GLVersion.GL20;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL21) {
0000000|                bindGLFunc(cast(void**)&glUniformMatrix2x3fv, "glUniformMatrix2x3fv");
0000000|                bindGLFunc(cast(void**)&glUniformMatrix3x2fv, "glUniformMatrix3x2fv");
0000000|                bindGLFunc(cast(void**)&glUniformMatrix2x4fv, "glUniformMatrix2x4fv");
0000000|                bindGLFunc(cast(void**)&glUniformMatrix4x2fv, "glUniformMatrix4x2fv");
0000000|                bindGLFunc(cast(void**)&glUniformMatrix3x4fv, "glUniformMatrix3x4fv");
0000000|                bindGLFunc(cast(void**)&glUniformMatrix4x3fv, "glUniformMatrix4x3fv");
0000000|                glVer = GLVersion.GL21;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL30) {
0000000|                load_ARB_framebuffer_object(true);
0000000|                load_ARB_map_buffer_range(true);
0000000|                load_ARB_vertex_array_object(true);
       |
0000000|                bindGLFunc(cast(void**)&glColorMaski, "glColorMaski");
0000000|                bindGLFunc(cast(void**)&glGetBooleani_v, "glGetBooleani_v");
0000000|                bindGLFunc(cast(void**)&glGetIntegeri_v, "glGetIntegeri_v");
0000000|                bindGLFunc(cast(void**)&glEnablei, "glEnablei");
0000000|                bindGLFunc(cast(void**)&glDisablei, "glDisablei");
0000000|                bindGLFunc(cast(void**)&glIsEnabledi, "glIsEnabledi");
0000000|                bindGLFunc(cast(void**)&glBeginTransformFeedback, "glBeginTransformFeedback");
0000000|                bindGLFunc(cast(void**)&glEndTransformFeedback, "glEndTransformFeedback");
0000000|                bindGLFunc(cast(void**)&glBindBufferRange, "glBindBufferRange");
0000000|                bindGLFunc(cast(void**)&glBindBufferBase, "glBindBufferBase");
0000000|                bindGLFunc(cast(void**)&glTransformFeedbackVaryings, "glTransformFeedbackVaryings");
0000000|                bindGLFunc(cast(void**)&glGetTransformFeedbackVarying, "glGetTransformFeedbackVarying");
0000000|                bindGLFunc(cast(void**)&glClampColor, "glClampColor");
0000000|                bindGLFunc(cast(void**)&glBeginConditionalRender, "glBeginConditionalRender");
0000000|                bindGLFunc(cast(void**)&glEndConditionalRender, "glEndConditionalRender");
0000000|                bindGLFunc(cast(void**)&glVertexAttribIPointer, "glVertexAttribIPointer");
0000000|                bindGLFunc(cast(void**)&glGetVertexAttribIiv, "glGetVertexAttribIiv");
0000000|                bindGLFunc(cast(void**)&glGetVertexAttribIuiv, "glGetVertexAttribIuiv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI1i, "glVertexAttribI1i");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI2i, "glVertexAttribI2i");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI3i, "glVertexAttribI3i");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI4i, "glVertexAttribI4i");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI1ui, "glVertexAttribI1ui");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI2ui, "glVertexAttribI2ui");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI3ui, "glVertexAttribI3ui");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI4ui, "glVertexAttribI4ui");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI1iv, "glVertexAttribI1iv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI2iv, "glVertexAttribI2iv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI3iv, "glVertexAttribI3iv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI4iv, "glVertexAttribI4iv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI1uiv, "glVertexAttribI1uiv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI2uiv, "glVertexAttribI2uiv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI3uiv, "glVertexAttribI3uiv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI4uiv, "glVertexAttribI4uiv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI4bv, "glVertexAttribI4bv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI4sv, "glVertexAttribI4sv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI4ubv, "glVertexAttribI4ubv");
0000000|                bindGLFunc(cast(void**)&glVertexAttribI4usv, "glVertexAttribI4usv");
0000000|                bindGLFunc(cast(void**)&glGetUniformuiv, "glGetUniformuiv");
0000000|                bindGLFunc(cast(void**)&glBindFragDataLocation, "glBindFragDataLocation");
0000000|                bindGLFunc(cast(void**)&glGetFragDataLocation, "glGetFragDataLocation");
0000000|                bindGLFunc(cast(void**)&glUniform1ui, "glUniform1ui");
0000000|                bindGLFunc(cast(void**)&glUniform2ui, "glUniform2ui");
0000000|                bindGLFunc(cast(void**)&glUniform3ui, "glUniform3ui");
0000000|                bindGLFunc(cast(void**)&glUniform4ui, "glUniform4ui");
0000000|                bindGLFunc(cast(void**)&glUniform1uiv, "glUniform1uiv");
0000000|                bindGLFunc(cast(void**)&glUniform2uiv, "glUniform2uiv");
0000000|                bindGLFunc(cast(void**)&glUniform3uiv, "glUniform3uiv");
0000000|                bindGLFunc(cast(void**)&glUniform4uiv, "glUniform4uiv");
0000000|                bindGLFunc(cast(void**)&glTexParameterIiv, "glTexParameterIiv");
0000000|                bindGLFunc(cast(void**)&glTexParameterIuiv, "glTexParameterIuiv");
0000000|                bindGLFunc(cast(void**)&glGetTexParameterIiv, "glGetTexParameterIiv");
0000000|                bindGLFunc(cast(void**)&glGetTexParameterIuiv, "glGetTexParameterIuiv");
0000000|                bindGLFunc(cast(void**)&glClearBufferiv, "glClearBufferiv");
0000000|                bindGLFunc(cast(void**)&glClearBufferuiv, "glClearBufferuiv");
0000000|                bindGLFunc(cast(void**)&glClearBufferfv, "glClearBufferfv");
0000000|                bindGLFunc(cast(void**)&glClearBufferfi, "glClearBufferfi");
0000000|                bindGLFunc(cast(void**)&glGetStringi, "glGetStringi");
0000000|                glVer = GLVersion.GL30;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL31) {
0000000|                load_ARB_copy_buffer(true);
0000000|                load_ARB_uniform_buffer_object(true);
       |
0000000|                bindGLFunc(cast(void**)&glDrawArraysInstanced, "glDrawArraysInstanced");
0000000|                bindGLFunc(cast(void**)&glDrawElementsInstanced, "glDrawElementsInstanced");
0000000|                bindGLFunc(cast(void**)&glTexBuffer, "glTexBuffer");
0000000|                bindGLFunc(cast(void**)&glPrimitiveRestartIndex, "glPrimitiveRestartIndex");
0000000|                glVer = GLVersion.GL31;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL32) {
0000000|                load_ARB_draw_elements_base_vertex(true);
0000000|                load_ARB_provoking_vertex(true);
0000000|                load_ARB_sync(true);
0000000|                load_ARB_texture_multisample(true);
       |
0000000|                bindGLFunc(cast(void**)&glGetInteger64i_v, "glGetInteger64i_v");
0000000|                bindGLFunc(cast(void**)&glGetBufferParameteri64v, "glGetBufferParameteri64v");
0000000|                bindGLFunc(cast(void**)&glFramebufferTexture, "glFramebufferTexture");
0000000|                glVer = GLVersion.GL32;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL33) {
0000000|                load_ARB_blend_func_extended(true);
0000000|                load_ARB_sampler_objects(true);
0000000|                load_ARB_timer_query(true);
0000000|                load_ARB_vertex_type_2_10_10_10_rev(true);
       |
0000000|                bindGLFunc(cast(void**)&glVertexAttribDivisor, "glVertexAttribDivisor");
0000000|                glVer = GLVersion.GL33;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL40) {
0000000|                load_ARB_draw_indirect(true);
0000000|                load_ARB_gpu_shader_fp64(true);
0000000|                load_ARB_shader_subroutine(true);
0000000|                load_ARB_tessellation_shader(true);
0000000|                load_ARB_transform_feedback2(true);
0000000|                load_ARB_transform_feedback3(true);
       |
0000000|                bindGLFunc(cast(void**)&glMinSampleShading, "glMinSampleShading");
0000000|                bindGLFunc(cast(void**)&glBlendEquationi, "glBlendEquationi");
0000000|                bindGLFunc(cast(void**)&glBlendEquationSeparatei, "glBlendEquationSeparatei");
0000000|                bindGLFunc(cast(void**)&glBlendFunci, "glBlendFunci");
0000000|                bindGLFunc(cast(void**)&glBlendFuncSeparatei, "glBlendFuncSeparatei");
0000000|                glVer = GLVersion.GL40;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL41) {
0000000|                load_ARB_ES2_compatibility(true);
0000000|                load_ARB_get_program_binary(true);
0000000|                load_ARB_separate_shader_objects(true);
0000000|                load_ARB_vertex_attrib_64bit(true);
0000000|                load_ARB_viewport_array(true);
       |
0000000|                glVer = GLVersion.GL41;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL42) {
0000000|                load_ARB_base_instance(true);
0000000|                load_ARB_transform_feedback_instanced(true);
0000000|                load_ARB_internalformat_query(true);
0000000|                load_ARB_shader_atomic_counters(true);
0000000|                load_ARB_shader_image_load_store(true);
0000000|                load_ARB_texture_storage(GLVersion.GL42, true);
       |
0000000|                glVer = GLVersion.GL42;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL43) {
0000000|                load_ARB_clear_buffer_object(true);
0000000|                load_ARB_copy_image(true);
0000000|                load_ARB_compute_shader(true);
0000000|                load_KHR_debug(true);
0000000|                load_ARB_framebuffer_no_attachments(true);
0000000|                load_ARB_internalformat_query2(true);
0000000|                load_ARB_invalidate_subdata(true);
0000000|                load_ARB_multi_draw_indirect(true);
0000000|                load_ARB_program_interface_query(true);
0000000|                load_ARB_shader_storage_buffer_object(true);
0000000|                load_ARB_texture_buffer_range(true);
0000000|                load_ARB_texture_storage_multisample(true);
0000000|                load_ARB_texture_view(true);
0000000|                load_ARB_vertex_attrib_binding(true);
       |
0000000|                glVer = GLVersion.GL43;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL44) {
0000000|                load_ARB_buffer_storage(GLVersion.GL44, true);
0000000|                load_ARB_clear_texture(true);
0000000|                load_ARB_multi_bind(true);
       |
0000000|                glVer = GLVersion.GL44;
       |            }
       |
0000000|            if(maxVer >= GLVersion.GL45) {
0000000|                load_ARB_clip_control(true);
0000000|                load_ARB_ES3_1_compatibility(true);
0000000|                load_ARB_direct_state_access(true);
0000000|                load_ARB_get_texture_sub_image(true);
0000000|                load_KHR_robustness(true);
0000000|                load_ARB_texture_barrier(true);
       |
0000000|                bindGLFunc(cast(void**)&glGetnTexImage, "glGetnTexImage");
0000000|                bindGLFunc(cast(void**)&glGetnCompressedTexImage, "glGetnCompressedTexImage");
0000000|                bindGLFunc(cast(void**)&glGetnUniformdv, "glGetnUniformdv");
       |
0000000|                glVer = GLVersion.GL45;
       |            }
       |
       |            // **** IMPORTANT **** !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       |            // When adding support for new versions, don't forget to update
       |            // the findMaxAvailable method
       |            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
       |
0000000|            loadARB(glVer);
0000000|            loadEXT(glVer);
0000000|            loadPlatformEXT( glVer );
       |
0000000|            return glVer;
       |        }
       |    }
       |
       |    protected override void loadSymbols() {
       |        // OpenGL 1.0
      1|        bindFunc(cast(void**)&glCullFace, "glCullFace");
      1|        bindFunc(cast(void**)&glFrontFace, "glFrontFace");
      1|        bindFunc(cast(void**)&glHint, "glHint");
      1|        bindFunc(cast(void**)&glLineWidth, "glLineWidth");
      1|        bindFunc(cast(void**)&glPointSize, "glPointSize");
      1|        bindFunc(cast(void**)&glPolygonMode, "glPolygonMode");
      1|        bindFunc(cast(void**)&glScissor, "glScissor");
      1|        bindFunc(cast(void**)&glTexParameterf, "glTexParameterf");
      1|        bindFunc(cast(void**)&glTexParameterfv, "glTexParameterfv");
      1|        bindFunc(cast(void**)&glTexParameteri, "glTexParameteri");
      1|        bindFunc(cast(void**)&glTexParameteriv, "glTexParameteriv");
      1|        bindFunc(cast(void**)&glTexImage1D, "glTexImage1D");
      1|        bindFunc(cast(void**)&glTexImage2D, "glTexImage2D");
      1|        bindFunc(cast(void**)&glDrawBuffer, "glDrawBuffer");
      1|        bindFunc(cast(void**)&glClear, "glClear");
      1|        bindFunc(cast(void**)&glClearColor, "glClearColor");
      1|        bindFunc(cast(void**)&glClearStencil, "glClearStencil");
      1|        bindFunc(cast(void**)&glClearDepth, "glClearDepth");
      1|        bindFunc(cast(void**)&glStencilMask, "glStencilMask");
      1|        bindFunc(cast(void**)&glColorMask, "glColorMask");
      1|        bindFunc(cast(void**)&glDepthMask, "glDepthMask");
      1|        bindFunc(cast(void**)&glDisable, "glDisable");
      1|        bindFunc(cast(void**)&glEnable, "glEnable");
      1|        bindFunc(cast(void**)&glFinish, "glFinish");
      1|        bindFunc(cast(void**)&glFlush, "glFlush");
      1|        bindFunc(cast(void**)&glBlendFunc, "glBlendFunc");
      1|        bindFunc(cast(void**)&glLogicOp, "glLogicOp");
      1|        bindFunc(cast(void**)&glStencilFunc, "glStencilFunc");
      1|        bindFunc(cast(void**)&glStencilOp, "glStencilOp");
      1|        bindFunc(cast(void**)&glDepthFunc, "glDepthFunc");
      1|        bindFunc(cast(void**)&glPixelStoref, "glPixelStoref");
      1|        bindFunc(cast(void**)&glPixelStorei, "glPixelStorei");
      1|        bindFunc(cast(void**)&glReadBuffer, "glReadBuffer");
      1|        bindFunc(cast(void**)&glReadPixels, "glReadPixels");
      1|        bindFunc(cast(void**)&glGetBooleanv, "glGetBooleanv");
      1|        bindFunc(cast(void**)&glGetDoublev, "glGetDoublev");
      1|        bindFunc(cast(void**)&glGetError, "glGetError");
      1|        bindFunc(cast(void**)&glGetFloatv, "glGetFloatv");
      1|        bindFunc(cast(void**)&glGetIntegerv, "glGetIntegerv");
      1|        bindFunc(cast(void**)&glGetString, "glGetString");
      1|        bindFunc(cast(void**)&glGetTexImage, "glGetTexImage");
      1|        bindFunc(cast(void**)&glGetTexParameterfv, "glGetTexParameterfv");
      1|        bindFunc(cast(void**)&glGetTexParameteriv, "glGetTexParameteriv");
      1|        bindFunc(cast(void**)&glGetTexLevelParameterfv, "glGetTexLevelParameterfv");
      1|        bindFunc(cast(void**)&glGetTexLevelParameteriv, "glGetTexLevelParameteriv");
      1|        bindFunc(cast(void**)&glIsEnabled, "glIsEnabled");
      1|        bindFunc(cast(void**)&glDepthRange, "glDepthRange");
      1|        bindFunc(cast(void**)&glViewport, "glViewport");
       |
       |        // OpenGL 1.1
      1|        bindFunc(cast(void**)&glDrawArrays, "glDrawArrays");
      1|        bindFunc(cast(void**)&glDrawElements, "glDrawElements");
      1|        bindFunc(cast(void**)&glPolygonOffset, "glPolygonOffset");
      1|        bindFunc(cast(void**)&glCopyTexImage1D, "glCopyTexImage1D");
      1|        bindFunc(cast(void**)&glCopyTexImage2D, "glCopyTexImage2D");
      1|        bindFunc(cast(void**)&glCopyTexSubImage1D, "glCopyTexSubImage1D");
      1|        bindFunc(cast(void**)&glCopyTexSubImage2D, "glCopyTexSubImage2D");
      1|        bindFunc(cast(void**)&glTexSubImage1D, "glTexSubImage1D");
      1|        bindFunc(cast(void**)&glTexSubImage2D, "glTexSubImage2D");
      1|        bindFunc(cast(void**)&glBindTexture, "glBindTexture");
      1|        bindFunc(cast(void**)&glDeleteTextures, "glDeleteTextures");
      1|        bindFunc(cast(void**)&glGenTextures, "glGenTextures");
      1|        bindFunc(cast(void**)&glIsTexture, "glIsTexture");
       |
      1|        _loadedVersion = GLVersion.GL11;
       |
      1|        loadPlatformGL(&bindFunc);
       |    }
       |
       |    private {
       |        GLVersion findMaxAvailable()
       |        {
       |            /* glGetString(GL_VERSION) is guaranteed to return a constant string
       |             of the format "[major].[minor].[build] xxxx", where xxxx is vendor-specific
       |             information. Here, I'm pulling two characters out of the string, the major
       |             and minor version numbers. */
0000000|            const(char)* verstr = glGetString(GL_VERSION);
0000000|            char major = *verstr;
0000000|            char minor = *(verstr + 2);
       |
0000000|            switch(major) {
0000000|                case '4':
0000000|                    if(minor == '5') return GLVersion.GL45;
0000000|                    else if(minor == '4') return GLVersion.GL44;
0000000|                    else if(minor == '3') return GLVersion.GL43;
0000000|                    else if(minor == '2') return GLVersion.GL42;
0000000|                    else if(minor == '1') return GLVersion.GL41;
0000000|                    else if(minor == '0') return GLVersion.GL40;
       |
       |                    /* No default condition here, since it's possible for new
       |                     minor versions of the 4.x series to be released before
       |                     support is added to Derelict. That case is handled outside
       |                     of the switch. When no more 4.x versions are released, this
       |                     should be changed to return GL40 by default. */
0000000|                    break;
       |
0000000|                case '3':
0000000|                    if(minor == '3') return GLVersion.GL33;
0000000|                    else if(minor == '2') return GLVersion.GL32;
0000000|                    else if(minor == '1') return GLVersion.GL31;
0000000|                    else return GLVersion.GL30;
       |
0000000|                case '2':
0000000|                    if(minor == '1') return GLVersion.GL21;
0000000|                    else return GLVersion.GL20;
       |
0000000|                case '1':
0000000|                    if(minor == '5') return GLVersion.GL15;
0000000|                    else if(minor == '4') return GLVersion.GL14;
0000000|                    else if(minor == '3') return GLVersion.GL13;
0000000|                    else if(minor == '2') return GLVersion.GL12;
0000000|                    else return GLVersion.GL11;
       |
0000000|                default:
       |                    /* glGetString(GL_VERSION) is guaranteed to return a result
       |                     of a specific format, so if this point is reached it is
       |                     going to be because a major version higher than what Derelict
       |                     supports was encountered. That case is handled outside the
       |                     switch. */
0000000|                    break;
       |
       |            }
       |
       |            /* It's highly likely at this point that the version is higher than
       |             what Derelict supports, so return the highest supported version. */
0000000|            return GLVersion.HighestSupported;
       |        }
       |    }
       |}
       |
       |__gshared DerelictGL3Loader DerelictGL3;
       |
       |shared static this() {
      1|    DerelictGL3 = new DerelictGL3Loader;
       |}
../../.dub/packages/derelict-gl3-1.0.22/source/derelict/opengl3/gl3.d is 16% covered
