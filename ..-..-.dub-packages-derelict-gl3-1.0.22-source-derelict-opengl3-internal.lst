       |/*
       |
       |Boost Software License - Version 1.0 - August 17th, 2003
       |
       |Permission is hereby granted, free of charge, to any person or organization
       |obtaining a copy of the software and accompanying documentation covered by
       |this license (the "Software") to use, reproduce, display, distribute,
       |execute, and transmit the Software, and to prepare derivative works of the
       |Software, and to permit third-parties to whom the Software is furnished to
       |do so, all subject to the following:
       |
       |The copyright notices in the Software and this entire statement, including
       |the above license grant, this restriction and the following disclaimer,
       |must be included in all copies of the Software, in whole or in part, and
       |all derivative works of the Software, unless such copies or derivative
       |works are solely in the form of machine-executable object code generated by
       |a source language processor.
       |
       |THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
       |SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
       |FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
       |ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
       |DEALINGS IN THE SOFTWARE.
       |
       |*/
       |module derelict.opengl3.internal;
       |
       |private {
       |    import std.array;
       |
       |    import derelict.util.exception,
       |           derelict.util.system;
       |    import derelict.opengl3.constants,
       |           derelict.opengl3.functions,
       |           derelict.opengl3.types;
       |    static if(Derelict_OS_Windows) import derelict.opengl3.wgl;
       |    else static if(Derelict_OS_Mac) import derelict.opengl3.cgl;
       |    else static if(Derelict_OS_Posix) import derelict.opengl3.glx;
       |}
       |
       |private {
       |    Appender!(const(char)*[]) _extCache;
       |    MissingSymbolCallback symCallback;
       |}
       |
       |package {
       |        void bindGLFunc(void** ptr, string symName) {
       |            import derelict.util.exception : SymbolLoadException;
       |
0000000|            auto sym = loadGLFunc(symName);
0000000|            if(!sym) {
0000000|                if(symCallback == null || symCallback(symName) == ShouldThrow.Yes)
0000000|                    throw new SymbolLoadException("Failed to load OpenGL symbol [" ~ symName ~ "]");
0000000|                else return;
       |            }
0000000|            *ptr = sym;
       |        }
       |
       |        /*
       |        This is called from DerelictGL3.reload to reset the extension name cache,
       |        since supported extensions can potentially vary from context to context.
       |        */
       |        void initExtensionCache(GLVersion glversion, MissingSymbolCallback callback) {
       |            // There's no need to cache extension names using the pre-3.0 glString
       |            // technique, but the modern style of using glStringi results in a high
       |            // number of calls when testing for every extension Derelict supports.
       |            // This causes extreme slowdowns when using GLSL-Debugger. The cache
       |            // solves that problem. Can't hurt load time, either.
0000000|            if(glversion >= GLVersion.GL30) {
0000000|                int count;
0000000|                glGetIntegerv(GL_NUM_EXTENSIONS, &count);
       |
0000000|                _extCache.shrinkTo(0);
0000000|                _extCache.reserve(count);
       |
0000000|                for(int i=0; i<count; ++i) {
0000000|                    _extCache.put(glGetStringi(GL_EXTENSIONS, i));
       |                }
       |            }
       |
0000000|            symCallback = callback;
       |        }
       |
       |        // Assumes that name is null-terminated, i.e. a string literal
       |        bool isExtSupported(GLVersion glversion, string name) {
       |            import core.stdc.string : strcmp;
       |
       |            // If OpenGL 3+ is loaded, use the cache.
0000000|            if(glversion >= GLVersion.GL30) {
0000000|                foreach(extname; _extCache.data) {
0000000|                    if(strcmp(extname, name.ptr) == 0)
0000000|                        return true;
       |                }
0000000|                return false;
       |            }
       |            // Otherwise use the classic approach.
       |            else {
0000000|                return findEXT(glGetString(GL_EXTENSIONS), name);
       |            }
       |        }
       |
       |        // Assumes that extname is null-terminated, i.e. a string literal
       |        bool findEXT(const(char)* extstr, string extname) {
       |            import core.stdc.string : strstr;
       |
0000000|            auto res = strstr(extstr, extname.ptr);
0000000|            while(res) {
       |                // It's possible that the extension name is actually a
       |                // substring of another extension. If not, then the
       |                // character following the name in the extension string
       |                // should be a space (or possibly the null character).
0000000|                if(res[ extname.length ] == ' ' || res[ extname.length ] == '\0')
0000000|                    return true;
0000000|                res = strstr(res + extname.length, extname.ptr);
       |            }
       |
0000000|            return false;
       |        }
       |}
../../.dub/packages/derelict-gl3-1.0.22/source/derelict/opengl3/internal.d is 0% covered
