       |/*
       |
       |Boost Software License - Version 1.0 - August 17th, 2003
       |
       |Permission is hereby granted, free of charge, to any person or organization
       |obtaining a copy of the software and accompanying documentation covered by
       |this license ( the "Software" ) to use, reproduce, display, distribute,
       |execute, and transmit the Software, and to prepare derivative works of the
       |Software, and to permit third-parties to whom the Software is furnished to
       |do so, all subject to the following:
       |
       |The copyright notices in the Software and this entire statement, including
       |the above license grant, this restriction and the following disclaimer,
       |must be included in all copies of the Software, in whole or in part, and
       |all derivative works of the Software, unless such copies or derivative
       |works are solely in the form of machine-executable object code generated by
       |a source language processor.
       |
       |THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
       |SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
       |FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
       |ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
       |DEALINGS IN THE SOFTWARE.
       |
       |*/
       |module derelict.util.sharedlib;
       |
       |import std.string;
       |import std.conv;
       |
       |import derelict.util.exception;
       |import derelict.util.system;
       |
       |alias void* SharedLibHandle;
       |
       |static if( Derelict_OS_Posix ) {
       |    import core.sys.posix.dlfcn;
       |
       |    enum LDFlags {
       |        rtldLocal = RTLD_LOCAL,
       |        rtldLazy = RTLD_LAZY,
       |        rtldNow = RTLD_NOW,
       |        rtldGlobal = RTLD_GLOBAL,
       |    }
       |
       |    void derelictLDFlags(LDFlags flags) {
0000000|        ldFlags = flags;
       |    }
       |
       |    private {
       |        LDFlags ldFlags = LDFlags.rtldNow;
       |
       |        SharedLibHandle LoadSharedLib( string libName )    {
      2|            return dlopen( libName.toStringz(), ldFlags );
       |        }
       |
       |        void UnloadSharedLib( SharedLibHandle hlib ) {
0000000|            dlclose( hlib );
       |        }
       |
       |        void* GetSymbol( SharedLibHandle hlib, string symbolName ) {
    809|            return dlsym( hlib, symbolName.toStringz() );
       |        }
       |
       |        string GetErrorStr() {
0000000|            auto err = dlerror();
0000000|            if( err is null )
0000000|                return "Uknown Error";
       |
0000000|            return to!string( err );
       |        }
       |    }
       |} else static if( Derelict_OS_Windows ) {
       |    import derelict.util.wintypes;
       |
       |    private {
       |        SharedLibHandle LoadSharedLib( string libName ) {
       |            return LoadLibraryA( libName.toStringz() );
       |        }
       |
       |        void UnloadSharedLib( SharedLibHandle hlib ) {
       |            FreeLibrary( hlib );
       |        }
       |
       |        void* GetSymbol( SharedLibHandle hlib, string symbolName ) {
       |            return GetProcAddress( hlib, symbolName.toStringz() );
       |        }
       |
       |        string GetErrorStr() {
       |            import std.windows.syserror;
       |            return sysErrorString( GetLastError() );
       |        }
       |    }
       |} else {
       |    static assert( 0, "Derelict does not support this platform." );
       |}
       |
       |/++
       | Low-level wrapper of the even lower-level operating-specific shared library
       | loading interface.
       |
       | While this interface can be used directly in applications, it is recommended
       | to use the interface specified by derelict.util.loader.SharedLibLoader
       | to implement bindings. SharedLib is designed to be the base of a higher-level
       | loader, but can be used in a program if only a handful of functions need to
       | be loaded from a given shared library.
       |+/
       |struct SharedLib {
       |    private {
       |        string _name;
       |        SharedLibHandle _hlib;
       |        private MissingSymbolCallbackDg _onMissingSym;
       |    }
       |
       |    public {
       |        /++
       |         Finds and loads a shared library, using names to find the library
       |         on the file system.
       |
       |         If multiple library names are specified in names, a SharedLibLoadException
       |         will only be thrown if all of the libraries fail to load. It will be the head
       |         of an exceptin chain containing one instance of the exception for each library
       |         that failed.
       |
       |
       |         Params:
       |            names = An array containing one or more shared library names,
       |                    with one name per index.
       |         Throws:    SharedLibLoadException if the shared library or one of its
       |                    dependencies cannot be found on the file system.
       |                    SymbolLoadException if an expected symbol is missing from the
       |                    library.
       |        +/
       |        void load( string[] names ) {
      2|            if( isLoaded )
0000000|                return;
       |
      2|            string[] failedLibs;
      2|            string[] reasons;
       |
      8|            foreach( n; names ) {
      2|                _hlib = LoadSharedLib( n );
      2|                if( _hlib !is null ) {
      2|                    _name = n;
      2|                    break;
       |                }
       |
0000000|                failedLibs ~= n;
0000000|                reasons ~= GetErrorStr();
       |            }
       |
      2|            if( !isLoaded ) {
0000000|                SharedLibLoadException.throwNew( failedLibs, reasons );
       |            }
       |        }
       |
       |        /++
       |         Loads the symbol specified by symbolName from a shared library.
       |
       |         Params:
       |            symbolName =        The name of the symbol to load.
       |            doThrow =   If true, a SymbolLoadException will be thrown if the symbol
       |                        is missing. If false, no exception will be thrown and the
       |                        ptr parameter will be set to null.
       |         Throws:        SymbolLoadException if doThrow is true and a the symbol
       |                        specified by funcName is missing from the shared library.
       |        +/
       |        void* loadSymbol( string symbolName, bool doThrow = true ) {
    809|            void* sym = GetSymbol( _hlib, symbolName );
   1616|            if( doThrow && !sym ) {
0000000|                auto result = ShouldThrow.Yes;
0000000|                if( _onMissingSym !is null )
0000000|                    result = _onMissingSym( symbolName );
0000000|                if( result == ShouldThrow.Yes )
0000000|                    throw new SymbolLoadException( _name, symbolName );
       |            }
       |
    809|            return sym;
       |        }
       |
       |        /++
       |         Unloads the shared library from memory, invalidating all function pointers
       |         which were assigned a symbol by one of the load methods.
       |        +/
       |        void unload() {
0000000|            if( isLoaded ) {
0000000|                UnloadSharedLib( _hlib );
0000000|                _hlib = null;
       |            }
       |        }
       |
       |        @property {
       |            /// Returns the name of the shared library.
       |            string name() {
0000000|                return _name;
       |            }
       |
       |            /// Returns true if the shared library is currently loaded, false otherwise.
       |            bool isLoaded() {
      4|                return ( _hlib !is null );
       |            }
       |
       |            /++
       |             Sets the callback that will be called when an expected symbol is
       |             missing from the shared library.
       |
       |             Params:
       |                callback =      A delegate that returns a value of type
       |                                derelict.util.exception.ShouldThrow and accepts
       |                                a string as the sole parameter.
       |            +/
       |            void missingSymbolCallback( MissingSymbolCallbackDg callback ) {
0000000|                _onMissingSym = callback;
       |            }
       |
       |            /++
       |             Sets the callback that will be called when an expected symbol is
       |             missing from the shared library.
       |
       |             Params:
       |                callback =      A pointer to a function that returns a value of type
       |                                derelict.util.exception.ShouldThrow and accepts
       |                                a string as the sole parameter.
       |            +/
       |            void missingSymbolCallback( MissingSymbolCallbackFunc callback ) {
       |                import std.functional : toDelegate;
0000000|                _onMissingSym = toDelegate( callback );
       |            }
       |
       |            /++
       |             Returns the currently active missing symbol callback.
       |
       |             This exists primarily as a means to save the current callback before
       |             setting a new one. It's useful, for example, if the new callback needs
       |             to delegate to the old one.
       |            +/
       |            MissingSymbolCallback missingSymbolCallback() {
0000000|                return _onMissingSym;
       |            }
       |        }
       |    }
       |}
../../.dub/packages/derelict-util-2.0.6/source/derelict/util/sharedlib.d is 40% covered
