       |import std.stdio;
       |
       |import std.stdio, std.datetime, std.file, std.string, core.thread, std.experimental.logger, derelict.sdl2.sdl, derelict.opengl3.gl;
       |import gfm.math.vector;
       |import renderer.renderer, renderer.scene, renderer.objects.sphere;
       |
       |SDL_Window* window;
       |SDL_Renderer* sdlRenderer;
       |
       |bool running = true;
       |
       |enum width = 128;
       |enum height = 128;
       |enum zoom = 3;
       |
       |Renderer myRenderer;
       |Color[] pixels;
       |
       |void main()
       |{
      1|        Scene scene = new Scene();
      1|        scene.objects ~= new Sphere(vec3f(0, 0, -5f), 3f);
       |
      1|        myRenderer = new Renderer(scene, width, height);
      1|        pixels = myRenderer.render();
       |
      1|        start();
       |}
       |
       |void start() {
      2|        log("Starting derp-renderer");
      1|        loadLibraries();
      1|        openWindow();
      1|        enterLoop();
       |}
       |
       |private void loadLibraries() {
      2|        log("Loading libraries");
      1|        DerelictSDL2.load("lib/SDL2");
      1|        DerelictGL.load();
       |}
       |
       |private void openWindow() {
      1|        SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
      1|        SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
      1|        SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
      1|        SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
      1|        SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, 32);
      1|        SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
       |        
      2|        log("Creating window");
      1|        SDL_CreateWindowAndRenderer(800, 600, SDL_WINDOW_OPENGL, &window, &sdlRenderer);
      1|        SDL_SetWindowTitle(window, "Gay Boy Emulator".toStringz);
      2|        log("Creating OpenGL context");
      1|        SDL_GL_CreateContext(window);
       |}
       |
       |private void enterLoop() {
      2|        log("Entering main loop");
       |        
    483|        while(running) {
    482|                updateEvents();
    482|                render();
    482|                limitFps();
       |        }
       |}
       |
       |private void updateEvents() {
    482|        SDL_Event event;
       |        
    571|        while(SDL_PollEvent(&event)) {
     89|                switch(event.type) {
      1|                        case SDL_QUIT:
      1|                                running = false;
      1|                                break;
       |                                
     88|                        default:
     88|                                break;
       |                }
       |        }
       |}
       |
       |private void render() {
    482|        glClearColor(0.1f, 0.1f, 0.1f, 1f);
    482|        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
       |        
    482|        glMatrixMode(GL_PROJECTION);
    482|        glLoadIdentity();
    482|        glViewport(0, 0, 800, 600);
    482|        glOrtho(0, 800, 0, 600, -1, 1);
    482|        glMatrixMode(GL_MODELVIEW);
    482|        glLoadIdentity();
       |        
    482|        glRasterPos3f(0, 600, 0);
    482|        glPixelZoom(zoom * 1f, zoom * -1f);
    482|        glDrawPixels(width, height, GL_RGB, GL_UNSIGNED_BYTE, pixels.ptr);
       |
    482|        SDL_GL_SwapWindow(window);
       |}
       |
       |private void limitFps() {
    482|        static StopWatch sw = StopWatch();
    482|        enum maxFPS = 60;
       |        
    482|        if(maxFPS != -1) {
    482|                long desiredNs = 1_000_000_000 / maxFPS; // How much time the frame should take
       |                
    482|                if(desiredNs - sw.peek.nsecs >= 0)
    158|                        Thread.sleep(nsecs(desiredNs - sw.peek.nsecs));
       |                
    482|                sw.reset();
    482|                sw.start();
       |        }
       |}
source/app.d is 100% covered
